// Generated by: vif2ver 2017.1      Mon Feb 27 18:45:32 GMT 2017 
// Generated on: Fri Feb  1 13:44:20 2019 
// Command Line Arguments: /home/tools/Mentor/tessent201701/lnx-x86/bin64/vif2ver.exe -DUTCardPresent OFF -s membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY -module SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY -allPins OFF -outDir SMARCHCHKB_outDir_etv -reportSimProgress ON -forceBidir 0X SMARCHCHKB_outDir_etv/SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY.vif
// vif:      'SMARCHCHKB_outDir_etv/SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY'
// pattern:  'membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY'
// module:   'SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY'
// 
`timescale 100ps/10ps
// The time units are  - 100pS (10ths of nS)
module TB;
    wire          TCK;
    wire          BIST_CLK;
    wire  scalared [ 1: 0] FL_CNT_MODE;
    wire          MBISTPG_EN;
    wire          TCK_MODE;
    wire          MBISTPG_SO;
    wire          LV_TM;
    wire  scalared [ 1: 0] BIST_SETUP;
    wire          BIST_SHIFT;
    wire          MBISTPG_DIAG_EN;
    wire          MBISTPG_DONE;
    wire          MBISTPG_MEM_RST;
    wire  scalared [ 5: 0] MBISTPG_CMP_STAT_ID_SEL;
    wire          BIST_SETUP2;
    wire          BIST_SI;
    wire          MBISTPG_REDUCED_ADDR_CNT_EN;
    wire          DVS3;
    wire          DVS2;
    wire          DVS1;
    wire          DVS0;
    wire  scalared [ 1: 0] MBISTPG_ALGO_MODE;
    wire          DVSE;
    wire          BIST_HOLD;
    wire          MBISTPG_TESTDATA_SELECT;
    wire          MBISTPG_GO;
    wire          MBISTPG_ASYNC_RESETN;

SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY CHIP (.TCK(TCK),
                                                                              .BIST_CLK(BIST_CLK),
                                                                              .FL_CNT_MODE(FL_CNT_MODE),
                                                                              .MBISTPG_EN(MBISTPG_EN),
                                                                              .TCK_MODE(TCK_MODE),
                                                                              .MBISTPG_SO(MBISTPG_SO),
                                                                              .LV_TM(LV_TM),
                                                                              .BIST_SETUP(BIST_SETUP),
                                                                              .BIST_SHIFT(BIST_SHIFT),
                                                                              .MBISTPG_DIAG_EN(MBISTPG_DIAG_EN),
                                                                              .MBISTPG_DONE(MBISTPG_DONE),
                                                                              .MBISTPG_MEM_RST(MBISTPG_MEM_RST),
                                                                              .MBISTPG_CMP_STAT_ID_SEL(MBISTPG_CMP_STAT_ID_SEL),
                                                                              .BIST_SETUP2(BIST_SETUP2),
                                                                              .BIST_SI(BIST_SI),
                                                                              .MBISTPG_REDUCED_ADDR_CNT_EN(MBISTPG_REDUCED_ADDR_CNT_EN),
                                                                              .DVS3(DVS3),
                                                                              .DVS2(DVS2),
                                                                              .DVS1(DVS1),
                                                                              .DVS0(DVS0),
                                                                              .MBISTPG_ALGO_MODE(MBISTPG_ALGO_MODE),
                                                                              .DVSE(DVSE),
                                                                              .BIST_HOLD(BIST_HOLD),
                                                                              .MBISTPG_TESTDATA_SELECT(MBISTPG_TESTDATA_SELECT),
                                                                              .MBISTPG_GO(MBISTPG_GO),
                                                                              .MBISTPG_ASYNC_RESETN(MBISTPG_ASYNC_RESETN));

membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY_checker checker_inst (.TCK(TCK),
                                                                       .BIST_CLK(BIST_CLK),
                                                                       .FL_CNT_MODE(FL_CNT_MODE),
                                                                       .MBISTPG_EN(MBISTPG_EN),
                                                                       .TCK_MODE(TCK_MODE),
                                                                       .MBISTPG_SO(MBISTPG_SO),
                                                                       .LV_TM(LV_TM),
                                                                       .BIST_SETUP(BIST_SETUP),
                                                                       .BIST_SHIFT(BIST_SHIFT),
                                                                       .MBISTPG_DIAG_EN(MBISTPG_DIAG_EN),
                                                                       .MBISTPG_DONE(MBISTPG_DONE),
                                                                       .MBISTPG_MEM_RST(MBISTPG_MEM_RST),
                                                                       .MBISTPG_CMP_STAT_ID_SEL(MBISTPG_CMP_STAT_ID_SEL),
                                                                       .BIST_SETUP2(BIST_SETUP2),
                                                                       .BIST_SI(BIST_SI),
                                                                       .MBISTPG_REDUCED_ADDR_CNT_EN(MBISTPG_REDUCED_ADDR_CNT_EN),
                                                                       .DVS3(DVS3),
                                                                       .DVS2(DVS2),
                                                                       .DVS1(DVS1),
                                                                       .DVS0(DVS0),
                                                                       .MBISTPG_ALGO_MODE(MBISTPG_ALGO_MODE),
                                                                       .DVSE(DVSE),
                                                                       .BIST_HOLD(BIST_HOLD),
                                                                       .MBISTPG_TESTDATA_SELECT(MBISTPG_TESTDATA_SELECT),
                                                                       .MBISTPG_GO(MBISTPG_GO),
                                                                       .MBISTPG_ASYNC_RESETN(MBISTPG_ASYNC_RESETN));

endmodule

module membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY_checker ( TCK, BIST_CLK, FL_CNT_MODE, 
                                                                  MBISTPG_EN, TCK_MODE, MBISTPG_SO, 
                                                                  LV_TM, BIST_SETUP, BIST_SHIFT, 
                                                                  MBISTPG_DIAG_EN, MBISTPG_DONE, MBISTPG_MEM_RST, 
                                                                  MBISTPG_CMP_STAT_ID_SEL, BIST_SETUP2, BIST_SI, 
                                                                  MBISTPG_REDUCED_ADDR_CNT_EN, DVS3, DVS2, 
                                                                  DVS1, DVS0, MBISTPG_ALGO_MODE, 
                                                                  DVSE, BIST_HOLD, MBISTPG_TESTDATA_SELECT, 
                                                                  MBISTPG_GO, MBISTPG_ASYNC_RESETN);
    output         TCK;
    output         BIST_CLK;
    output [ 1: 0] FL_CNT_MODE;
    output         MBISTPG_EN;
    output         TCK_MODE;
    input          MBISTPG_SO;
    output         LV_TM;
    output [ 1: 0] BIST_SETUP;
    output         BIST_SHIFT;
    output         MBISTPG_DIAG_EN;
    input          MBISTPG_DONE;
    output         MBISTPG_MEM_RST;
    output [ 5: 0] MBISTPG_CMP_STAT_ID_SEL;
    output         BIST_SETUP2;
    output         BIST_SI;
    output         MBISTPG_REDUCED_ADDR_CNT_EN;
    output         DVS3;
    output         DVS2;
    output         DVS1;
    output         DVS0;
    output [ 1: 0] MBISTPG_ALGO_MODE;
    output         DVSE;
    output         BIST_HOLD;
    output         MBISTPG_TESTDATA_SELECT;
    input          MBISTPG_GO;
    output         MBISTPG_ASYNC_RESETN;

    reg          TCK;
    reg          BIST_CLK;
    reg  [ 1: 0] FL_CNT_MODE;
    reg          MBISTPG_EN;
    reg          TCK_MODE;
    reg          LV_TM;
    reg  [ 1: 0] BIST_SETUP;
    reg          BIST_SHIFT;
    reg          MBISTPG_DIAG_EN;
    reg          MBISTPG_MEM_RST;
    reg  [ 5: 0] MBISTPG_CMP_STAT_ID_SEL;
    reg          BIST_SETUP2;
    reg          BIST_SI;
    reg          MBISTPG_REDUCED_ADDR_CNT_EN;
    reg          DVS3;
    reg          DVS2;
    reg          DVS1;
    reg          DVS0;
    reg  [ 1: 0] MBISTPG_ALGO_MODE;
    reg          DVSE;
    reg          BIST_HOLD;
    reg          MBISTPG_TESTDATA_SELECT;
    reg          MBISTPG_ASYNC_RESETN;



    /* Declare Variables */
        event               simulation_complete;
        integer             number_dont_care_compareEvents;
        integer             number_tristate_compareEvents;
        integer             number_compareEvents;
        integer             number_compareFailures;
        time                repeatNumber;
        integer             splitLoop;
    /* Initial & Final Tasks */
        initial    
            begin
                number_dont_care_compareEvents = 0;
                number_tristate_compareEvents  = 0;
                number_compareEvents           = 0;
                number_compareFailures         = 0;
                repeatNumber                   = 0;
                splitLoop                      = 0;
            end	 

        always @(simulation_complete)
            begin
                $display ("\n",
                        "Simulation finished at time  = %d\n", $time,
                        "Number of  Z  Compare Events = %d\n", number_tristate_compareEvents,
                        "Number of 1/0 Compare Events = %d\n", number_compareEvents,
                        "Number of Compare Failures   = %d\n", number_compareFailures 
                        );
                $dumpflush;
                $finish;
            end	
        /* Compare Task */
            task  compare;
                input [8*1024-1:0]  signalName;
                input               outputSignal, expected_outputSignal;
                parameter triState  = 1'bZ;
                parameter dontCare  = 1'bX;
                begin
                    if (expected_outputSignal === triState)
                        number_tristate_compareEvents  = number_tristate_compareEvents  + 1;
                    else if (expected_outputSignal === dontCare)
                        number_dont_care_compareEvents = number_dont_care_compareEvents  + 1;
                    else 
                        number_compareEvents           = number_compareEvents  + 1; 
                    
                    if ((expected_outputSignal === dontCare) || 
                        (expected_outputSignal === outputSignal))  
                        begin
                            if ($test$plusargs("showpass")) begin
                                $display ($time,
                                    " Compare pass: %0s expect = %b  actual = %b ",
                                    signalName[1024*8-1:0], expected_outputSignal, outputSignal); 
                            end 
                        end 
                    else
                        begin
                            number_compareFailures = number_compareFailures + 1;
                            $display ($time,
                                " Compare fail: %0s  expect = %b actual = %b",
                                signalName[1024*8-1:0], expected_outputSignal, outputSignal);
                        end
                end
            endtask 

        initial begin
        // 
        // Assign input part of bidirectionals to Z and initialize clocks
        // 
            #0                             BIST_CLK = 1'b0;

        // 
        // The tester period is: 50 (10ths of nS)
        // 
                $display("%d Setting LV_TM                to 0 ", $time);
                $display("%d Setting DVS3                 to 0 ", $time);
                $display("%d Setting DVS2                 to 0 ", $time);
                $display("%d Setting DVS1                 to 0 ", $time);
                $display("%d Setting DVS0                 to 0 ", $time);
                $display("%d Setting DVSE                 to 0 ", $time);
                TCK = 1'b1;
                LV_TM = 1'b0;
                DVS3 = 1'b0;
                DVS2 = 1'b0;
                DVS1 = 1'b0;
                DVS0 = 1'b0;
                DVSE = 1'b0;
            #38;
                FL_CNT_MODE[1] = 1'b0;
                FL_CNT_MODE[0] = 1'b0;
                MBISTPG_EN = 1'b0;
                TCK_MODE = 1'b0;
                BIST_SETUP[1] = 1'b0;
                BIST_SETUP[0] = 1'b0;
                BIST_SHIFT = 1'b0;
                MBISTPG_DIAG_EN = 1'b0;
                MBISTPG_MEM_RST = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[5] = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[4] = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[3] = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[2] = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[1] = 1'b0;
                MBISTPG_CMP_STAT_ID_SEL[0] = 1'b0;
                BIST_SETUP2 = 1'b0;
                BIST_SI = 1'b0;
                MBISTPG_REDUCED_ADDR_CNT_EN = 1'b0;
                MBISTPG_ALGO_MODE[1] = 1'b0;
                MBISTPG_ALGO_MODE[0] = 1'b0;
                BIST_HOLD = 1'b0;
                MBISTPG_TESTDATA_SELECT = 1'b0;
                MBISTPG_ASYNC_RESETN = 1'b0;
            #12;
                $display("%d Pausing for 50.0 ns, (10 clock cycles) ", $time);
            #50;
        #0 repeat (9) begin
            #50;
        end
                `ifdef LV_DONT_COMPARE_ASSERTS
                `else
                  compare("Primary Input LV_TM", CHIP.LV_TM, 1'b0);
                  compare("Primary Input DVS3", CHIP.DVS3, 1'b0);
                  compare("Primary Input DVS2", CHIP.DVS2, 1'b0);
                  compare("Primary Input DVS1", CHIP.DVS1, 1'b0);
                  compare("Primary Input DVS0", CHIP.DVS0, 1'b0);
                  compare("Primary Input DVSE", CHIP.DVSE, 1'b0);
                `endif
            #50;
                $display("%d Starting Clock Monitoring", $time); 
                -> membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY_ClockMon.start_monitor_clocks ;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #250;
        #0 repeat (19) begin
            #50;
        end
                -> membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY_ClockMon.stop_monitor_clocks ;
                $display("%d Disabling Asynchronous Reset for controller SMARCHCHKB_LVISION_MBISTPG_CTRL by setting MBISTPG_ASYNC_RESETN to 1 ", $time);
                $display("%d   ", $time);
                $display("%d       *******    TestStep Default   ******* ", $time);
                $display("%d   ", $time);
                $display("%d      ", $time);
                $display("%d Starting Controller SMARCHCHKB_LVISION_MBISTPG_CTRL connected to DP0 ", $time);
            #38;
                MBISTPG_ASYNC_RESETN = 1'b1;
            #112;
        #0 repeat (2) begin
            #50;
        end
            #38;
                MBISTPG_EN = 1'b1;
                BIST_SETUP[1] = 1'b1;
            #12;
                $display("%d     Checking that the DONE signal is NO on pin MBISTPG_DONE at beginning of test ", $time);
                $display("%d     Checking that the GO signal is FAIL on pin MBISTPG_GO at beginning of test ", $time);
            #38;
                compare("MBISTPG_DONE",MBISTPG_DONE, 1'b0);
                compare("MBISTPG_GO",MBISTPG_GO, 1'b0);
            #62;
        #0 repeat (6) begin
            #50;
        end
                $display("%d     Checking that the GO signal is PASS on pin MBISTPG_GO during test ", $time);
            #38;
                compare("MBISTPG_GO",MBISTPG_GO, 1'b1);
            #12;
        $display("                     -----  0%% -----  ");
        #0 repeat (114719) begin
            repeatNumber = repeatNumber + 1;
            if (splitLoop == 5735)
                begin
                    if (repeatNumber*100/114719 < 100)
                        $display("                     -----  %0d%% -----  ",
                                 repeatNumber*100/114719);
                    splitLoop = 0;
                end
            else
                splitLoop = splitLoop + 1;
            #38;
                compare("MBISTPG_GO",MBISTPG_GO, 1'b1);
            #12;
        end
        $display("                     ----- 100%% -----  ");
        splitLoop   = 0;
        repeatNumber = 0;
                $display("%d     Checking that the DONE signal is YES on pin MBISTPG_DONE after test ", $time);
            #38;
                compare("MBISTPG_DONE",MBISTPG_DONE, 1'b1);
            #12;
                $display("%d Checking results of controller SMARCHCHKB_LVISION_MBISTPG_CTRL connected to DP0 ", $time);
                TCK = 1'b0;
            #38;
                BIST_SETUP[1] = 1'b0;
                BIST_SHIFT = 1'b1;
                BIST_HOLD = 1'b1;
            #112;
                $display("%d     Checking that GO_ID bits are PASS ", $time);
            #38;
                compare("DP0_GO_ID_REG0 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG1 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG2 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG3 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG4 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG5 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG6 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG7 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG8 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG9 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG10 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG11 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG12 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG13 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG14 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG15 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG16 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG17 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG18 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG19 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG20 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG21 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG22 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG23 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG24 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG25 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG26 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG27 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG28 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG29 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG30 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #188;
                compare("DP0_GO_ID_REG31 on Pin MBISTPG_SO",MBISTPG_SO, 1'b0);
            #12;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                TCK = 1'b0;
            #200;
                TCK = 1'b1;
            #200;
                $display("%d   ", $time);

              -> simulation_complete;

     end
// Event Processing Completes for pattern membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY .

// Highest event time = 5780350
// Total vector count = 115607

// Clock generation code for BIST_CLK
    initial begin
            #13	BIST_CLK = 1'b0;
            #50	BIST_CLK = 1'b1;
        forever begin
            #25;
            #0  BIST_CLK = 1'b0;
            #25;
            #0  BIST_CLK = 1'b1;
        end
    end



 `ifdef VCD 
     initial
         begin
             $dumpfile("verilog_membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY.dump");
             $dumpvars;
         end
 `endif

 `ifdef UTVCD 
     initial
         begin
             $dumpfile("verilog_membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY.dump");
             $vtDump;
             $dumpvars;
         end
 `endif
 `ifdef debussy 
     initial
         begin
             $fsdbDumpfile("dump_membistpv_P1_SMARCHCHKB_LVISION_MBISTPG_ASSEMBLY.fsdb");
             $fsdbDumpvars;
         end
 `endif

endmodule
